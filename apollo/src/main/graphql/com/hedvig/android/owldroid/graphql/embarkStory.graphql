query EmbarkStory($name: String!, $locale: String!) {
  embarkStory(name: $name, locale: $locale) {
    startPassage
    computedStoreValues {
      key
      value
    }
    passages {
      name
      id
      externalRedirect {
        data {
          location
        }
      }
      offerRedirect {
        data {
          keys
        }
      }
      messages {
        ...MessageFragment
      }
      response {
        ...MessageFragment
        ... on EmbarkResponseExpression {
          text
          expressions {
            ...ExpressionFragment
          }
        }
      }
      redirects {
        ... on EmbarkRedirectUnaryExpression {
          unaryType: type
          to
          passedExpressionKey
          passedExpressionValue
        }
        ... on EmbarkRedirectBinaryExpression {
          binaryType: type
          to
          key
          value
          passedExpressionKey
          passedExpressionValue
        }
        ... on EmbarkRedirectMultipleExpressions {
          multipleExpressionType: type
          to
          passedExpressionKey
          passedExpressionValue
          subExpressions {
            ...ExpressionFragment
          }
        }
      }
      action {
        ... on EmbarkSelectAction {
          selectData: data {
            options {
              link {
                ...EmbarkLinkFragment
              }
              keys
              values
            }
          }
        }
        ... on EmbarkTextAction {
          textData: data {
            key
            placeholder
            mask
            link {
              ...EmbarkLinkFragment
            }
          }
        }
        ... on EmbarkTextActionSet {
          textSetData: data {
            link {
              ...EmbarkLinkFragment
            }
            textActions {
              data {
                key
                mask
                placeholder
                title
              }
            }
          }
        }
        ... on EmbarkPreviousInsuranceProviderAction {
          previousInsurerData: data {
            next {
              ...EmbarkLinkFragment
            }
            skip {
              ...EmbarkLinkFragment
            }
            storeKey
            insuranceProviders {
              name
              logo {
                variants {
                  ...IconVariantsFragment
                }
              }
            }
          }
        }
        ... on EmbarkNumberAction {
          numberActionData: data {
            key
            placeholder
            unit
            label
            maxValue
            minValue
            link {
              ...EmbarkLinkFragment
            }
          }
        }
        ... on EmbarkNumberActionSet {
          numberActionSetData: data {
            numberActions {
              data {
                key
                placeholder
                unit
                label
                maxValue
                minValue
                title
              }
            }
            link {
              ...EmbarkLinkFragment
            }
          }
        }
        ... on EmbarkDatePickerAction {
          storeKey
          label
          next {
            ...EmbarkLinkFragment
          }
        }
      }
      api {
        ...ApiFragment
      }
      tooltips {
        title
        description
      }
      allLinks {
        ...EmbarkLinkFragment
      }
      tracks {
        eventName
        eventKeys
        includeAllKeys
        customData
      }
    }
  }
}

fragment EmbarkLinkFragment on EmbarkLink {
  name
  label
}

fragment MessageFragment on EmbarkMessage {
  expressions {
    ...ExpressionFragment
  }
  text
}

fragment BasicExpressionFragment on EmbarkExpression {
  ... on EmbarkExpressionUnary {
    unaryType: type
    text
  }
  ... on EmbarkExpressionBinary {
    binaryType: type
    key
    value
    text
  }
}

fragment ExpressionFragment on EmbarkExpression {
  ...BasicExpressionFragment
  ... on EmbarkExpressionMultiple {
    multipleType: type
    text
    subExpressions {
      ...BasicExpressionFragment
    }
  }
}

fragment ApiFragment on EmbarkApi {
  ... on EmbarkApiGraphQLQuery {
    queryData: data {
      query
      results {
        ...GraphQLResultsFragment
      }
      errors {
        ...GraphQLErrorsFragment
      }
      variables {
        ...GraphQLVariablesFragment
      }
      next {
        ...EmbarkLinkFragment
      }
    }
  }
  ... on EmbarkApiGraphQLMutation {
    mutationData: data {
      mutation
      results {
        ...GraphQLResultsFragment
      }
      variables {
        ...GraphQLVariablesFragment
      }
      errors {
        ...GraphQLErrorsFragment
      }
      next {
        ...EmbarkLinkFragment
      }
    }
  }
}

fragment GraphQLResultsFragment on EmbarkAPIGraphQLResult {
  key
  as
}

fragment GraphQLVariablesFragment on EmbarkAPIGraphQLVariable {
  ... on EmbarkAPIGraphQLSingleVariable {
    key
    from
    as
  }
  ... on EmbarkAPIGraphQLGeneratedVariable {
    key
    storeAs
    type
  }
}

fragment GraphQLErrorsFragment on EmbarkAPIGraphQLError {
  contains
  next {
    ...EmbarkLinkFragment
  }
}
