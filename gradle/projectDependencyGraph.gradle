//Heavily inspired from https://github.com/chrisbanes/tivi/blob/main/gradle/dependencyGraph.gradle

def font = "Helvetica"

task generateProjectDependencyGraph {
    notCompatibleWithConfigurationCache("Uses project inside `doLast`. Might look into this https://github.com/apollographql/apollo-kotlin/issues/4925 to fix it in a similar way")
    doLast {
        def dot = new File(rootProject.buildDir, 'reports/dependency-graph/project.dot')
        dot.parentFile.mkdirs()
        dot.delete()

        dot << 'digraph {\n'
        dot << "  graph [label=\"${rootProject.name}\\n \",labelloc=t,fontsize=30,ranksep=1.4,fontname=\"$font\"];\n"
        dot << "  node [style=filled, fillcolor=\"#bbbbbb\", fontname=\"$font\"];\n"
        dot << "  edge [fontname = \"$font\"];"
        dot << '  rankdir=TB;\n'

        def rootProjects = []
        def queue = [rootProject]
        while (!queue.isEmpty()) {
            def project = queue.remove(0)
            rootProjects.add(project)
            queue.addAll(project.childProjects.values())
        }

        def projects = new LinkedHashSet<Project>()
        def dependencies = new LinkedHashMap<Tuple2<Project, Project>, List<String>>()
        def multiplatformProjects = []
        def jsProjects = []
        def androidProjects = []
        def javaProjects = []

        queue = [rootProject]
        println "[DEBUG]: queue$queue"
        while (!queue.isEmpty()) {
            def project = queue.remove(0)
            queue.addAll(project.childProjects.values())

            if (project.plugins.hasPlugin('org.jetbrains.kotlin.multiplatform')) {
                multiplatformProjects.add(project)
            }
            if (project.plugins.hasPlugin('org.jetbrains.kotlin.js')) {
                jsProjects.add(project)
            }
            if (project.plugins.hasPlugin('com.android.library') || project.plugins.hasPlugin('com.android.application')) {
                androidProjects.add(project)
            }
            if (project.plugins.hasPlugin('java-library') || project.plugins.hasPlugin('java')) {
                javaProjects.add(project)
            }

            println "[DEBUG]: configurations: ${project.configurations}"
            project.configurations.all { config ->
                config.dependencies
                        .withType(ProjectDependency)
                        .collect { it.dependencyProject }
                        .each { dependency ->
                            projects.add(project)
                            projects.add(dependency)
                            rootProjects.remove(dependency)

                            def graphKey = new Tuple2<Project, Project>(project, dependency)
                            def traits = dependencies.computeIfAbsent(graphKey) { new ArrayList<String>() }


                            def configLowerCaseName = config.name.toLowerCase()
                            println "configLowerCaseName:${configLowerCaseName}"
                            if (configLowerCaseName.endsWith('implementation') || configLowerCaseName.endsWith('lintchecks')) {
                                traits.add('style=dotted')
                            }
                        }
            }
        }

        projects = projects.sort { it.path }

        dot << '\n  # Projects\n\n'
        for (project in projects) {
            def traits = []

            if (rootProjects.contains(project)) {
                continue
            }

            if (multiplatformProjects.contains(project)) {
                traits.add('fillcolor="#ffd2b3"')
            } else if (jsProjects.contains(project)) {
                traits.add('fillcolor="#ffffba"')
            } else if (androidProjects.contains(project)) {
                traits.add('fillcolor="#baffc9"')
            } else if (javaProjects.contains(project)) {
                traits.add('fillcolor="#ffb3ba"')
            } else {
                traits.add('fillcolor="#eeeeee"')
            }

            dot << "  \"${project.path}\" [${traits.join(", ")}];\n"
        }

        dot << '\n  # Dependencies\n\n'
        dependencies.forEach { key, traits ->
            def isEmptyPath = key.first.path == ':'
            def isPointingToSelf = key.first.path == key.second.path
            if (!isEmptyPath && !isPointingToSelf) {
                dot << "  \"${key.first.path}\" -> \"${key.second.path}\""
                if (!traits.isEmpty()) {
                    dot << " [${traits.join(", ")}]"
                }
                dot << '\n'
            }
        }

        dot << '}\n'

        def p = "dot -Tpng -o misc/images/modularization-graph.png ${dot}".execute()
        p.waitFor()
        if (p.exitValue() != 0) {
            throw new RuntimeException(p.errorStream.text)
        }

        println("Project module dependency graph created at misc/images/modularization-graph.png")
    }
}